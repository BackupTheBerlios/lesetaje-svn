#############################################################################
# Makefile for building: sKeleton
# Generated by qmake (1.07a) (Qt 3.3.4) on: Sun Feb 26 13:32:23 2006
# Project:  skeleton.pro
# Template: app
# Command: $(QMAKE) -o Makefile skeleton.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -g  
CXXFLAGS = -pipe -Wall -W -g  
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/share/qt3/mkspecs/default -I. -I/usr/include/qt3 -Imoc/
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L/usr/share/qt3/lib -L/usr/X11R6/lib -lqt -lXext -lX11 -lm
AR       = ar cqs
RANLIB   = 
MOC      = /usr/share/qt3/bin/moc
UIC      = /usr/share/qt3/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = obj/

####### Files

HEADERS = skeletonwidget.hpp \
		skeletoncanvasview.hpp \
		bone.hpp
SOURCES = main.cpp \
		skeletonwidget.cpp \
		skeletoncanvasview.cpp \
		bone.cpp
OBJECTS = obj/main.o \
		obj/skeletonwidget.o \
		obj/skeletoncanvasview.o \
		obj/bone.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc/moc_skeletonwidget.cpp \
		moc/moc_skeletoncanvasview.cpp
OBJMOC = obj/moc_skeletonwidget.o \
		obj/moc_skeletoncanvasview.o
DIST	   = skeleton.pro
QMAKE_TARGET = sKeleton
DESTDIR  = 
TARGET   = sKeleton

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: skeleton.pro  /usr/share/qt3/mkspecs/default/qmake.conf 
	$(QMAKE) -o Makefile skeleton.pro
qmake: 
	@$(QMAKE) -o Makefile skeleton.pro

dist: 
	@mkdir -p obj/sKeleton && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) obj/sKeleton/ && ( cd `dirname obj/sKeleton` && $(TAR) sKeleton.tar sKeleton && $(GZIP) sKeleton.tar ) && $(MOVE) `dirname obj/sKeleton`/sKeleton.tar.gz . && $(DEL_FILE) -r obj/sKeleton

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

obj/main.o: main.cpp skeletonwidget.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/main.o main.cpp

obj/skeletonwidget.o: skeletonwidget.cpp skeletonwidget.hpp \
		skeletoncanvasview.hpp \
		bone.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/skeletonwidget.o skeletonwidget.cpp

obj/skeletoncanvasview.o: skeletoncanvasview.cpp skeletoncanvasview.hpp \
		bone.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/skeletoncanvasview.o skeletoncanvasview.cpp

obj/bone.o: bone.cpp bone.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/bone.o bone.cpp

obj/moc_skeletonwidget.o: moc/moc_skeletonwidget.cpp  skeletonwidget.hpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_skeletonwidget.o moc/moc_skeletonwidget.cpp

obj/moc_skeletoncanvasview.o: moc/moc_skeletoncanvasview.cpp  skeletoncanvasview.hpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_skeletoncanvasview.o moc/moc_skeletoncanvasview.cpp

moc/moc_skeletonwidget.cpp: $(MOC) skeletonwidget.hpp
	$(MOC) skeletonwidget.hpp -o moc/moc_skeletonwidget.cpp

moc/moc_skeletoncanvasview.cpp: $(MOC) skeletoncanvasview.hpp
	$(MOC) skeletoncanvasview.hpp -o moc/moc_skeletoncanvasview.cpp

####### Install

install:  

uninstall:  

